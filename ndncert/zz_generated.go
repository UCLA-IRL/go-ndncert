// Generated by the generator, DO NOT modify manually
package ndncert

import (
	"encoding/binary"
	"io"
	"strings"

	enc "github.com/zjkmxy/go-ndn/pkg/encoding"
)

type CaProfileEncoder struct {
	length uint

	CaPrefix_length uint

	ParameterKey_subencoder []struct {
	}

	CaCertificate_length uint
}

type CaProfileParsingContext struct {
}

func (encoder *CaProfileEncoder) Init(value *CaProfile) {
	if value.CaPrefix != nil {
		encoder.CaPrefix_length = 0
		for _, c := range value.CaPrefix {
			encoder.CaPrefix_length += uint(c.EncodingLength())
		}
	}

	{
		ParameterKey_l := len(value.ParameterKey)
		encoder.ParameterKey_subencoder = make([]struct {
		}, ParameterKey_l)
		for i := 0; i < ParameterKey_l; i++ {
			pseudoEncoder := &encoder.ParameterKey_subencoder[i]
			pseudoValue := struct {
				ParameterKey string
			}{
				ParameterKey: value.ParameterKey[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue

				_ = encoder
				_ = value
			}
		}
	}

	if value.CaCertificate != nil {
		encoder.CaCertificate_length = 0
		for _, c := range value.CaCertificate {
			encoder.CaCertificate_length += uint(len(c))
		}
	}

	l := uint(0)
	if value.CaPrefix != nil {
		l += 1
		switch x := encoder.CaPrefix_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.CaPrefix_length
	}

	l += 1
	switch x := len(value.CaInfo); {
	case x <= 0xfc:
		l += 1
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}
	l += uint(len(value.CaInfo))

	if value.ParameterKey != nil {
		for seq_i, seq_v := range value.ParameterKey {
			pseudoEncoder := &encoder.ParameterKey_subencoder[seq_i]
			pseudoValue := struct {
				ParameterKey string
			}{
				ParameterKey: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				l += 1
				switch x := len(value.ParameterKey); {
				case x <= 0xfc:
					l += 1
				case x <= 0xffff:
					l += 3
				case x <= 0xffffffff:
					l += 5
				default:
					l += 9
				}
				l += uint(len(value.ParameterKey))

				_ = encoder
				_ = value
			}
		}
	}

	l += 1
	switch x := value.MaxValidPeriod; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	if value.CaCertificate != nil {
		l += 1
		switch x := encoder.CaCertificate_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.CaCertificate_length
	}

	encoder.length = l

}

func (context *CaProfileParsingContext) Init() {

}

func (encoder *CaProfileEncoder) EncodeInto(value *CaProfile, buf []byte) {

	pos := uint(0)
	if value.CaPrefix != nil {
		buf[pos] = byte(129)
		pos += 1
		switch x := encoder.CaPrefix_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.CaPrefix {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

	buf[pos] = byte(131)
	pos += 1
	switch x := len(value.CaInfo); {
	case x <= 0xfc:
		buf[pos] = byte(x)
		pos += 1
	case x <= 0xffff:
		buf[pos] = 0xfd
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 0xfe
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 0xff
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}
	copy(buf[pos:], value.CaInfo)
	pos += uint(len(value.CaInfo))

	if value.ParameterKey != nil {
		for seq_i, seq_v := range value.ParameterKey {
			pseudoEncoder := &encoder.ParameterKey_subencoder[seq_i]
			pseudoValue := struct {
				ParameterKey string
			}{
				ParameterKey: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				buf[pos] = byte(133)
				pos += 1
				switch x := len(value.ParameterKey); {
				case x <= 0xfc:
					buf[pos] = byte(x)
					pos += 1
				case x <= 0xffff:
					buf[pos] = 0xfd
					binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
					pos += 3
				case x <= 0xffffffff:
					buf[pos] = 0xfe
					binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
					pos += 5
				default:
					buf[pos] = 0xff
					binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
					pos += 9
				}
				copy(buf[pos:], value.ParameterKey)
				pos += uint(len(value.ParameterKey))

				_ = encoder
				_ = value
			}
		}
	}

	buf[pos] = byte(139)
	pos += 1
	switch x := value.MaxValidPeriod; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

	if value.CaCertificate != nil {
		buf[pos] = byte(137)
		pos += 1
		switch x := encoder.CaCertificate_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, w := range value.CaCertificate {
			copy(buf[pos:], w)
			pos += uint(len(w))
		}
	}

}

func (encoder *CaProfileEncoder) Encode(value *CaProfile) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *CaProfileParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*CaProfile, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &CaProfile{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 129:
				if progress+1 == 0 {
					handled = true
					value.CaPrefix = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.CaPrefix {
						if reader.Pos() >= endName {
							value.CaPrefix = value.CaPrefix[:j]
							break
						}
						var err1, err3 error
						value.CaPrefix[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.CaPrefix[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			case 131:
				if progress+1 == 1 {
					handled = true
					{
						var builder strings.Builder
						_, err = io.CopyN(&builder, reader, int64(l))
						if err == nil {
							value.CaInfo = builder.String()
						}
					}

				}
			case 133:
				if progress+1 == 2 {
					handled = true
					if value.ParameterKey == nil {
						value.ParameterKey = make([]string, 0)
					}
					{
						pseudoValue := struct {
							ParameterKey string
						}{}
						{
							value := &pseudoValue
							{
								var builder strings.Builder
								_, err = io.CopyN(&builder, reader, int64(l))
								if err == nil {
									value.ParameterKey = builder.String()
								}
							}

							_ = value
						}
						value.ParameterKey = append(value.ParameterKey, pseudoValue.ParameterKey)
					}
					progress--

				}
			case 139:
				if progress+1 == 3 {
					handled = true
					value.MaxValidPeriod = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.MaxValidPeriod = uint64(value.MaxValidPeriod<<8) | uint64(x)
						}
					}
				}
			case 137:
				if progress+1 == 4 {
					handled = true
					value.CaCertificate, err = reader.ReadWire(int(l))

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.CaPrefix = nil
				case 1 - 1:
					err = enc.ErrSkipRequired{Name: "CaInfo", TypeNum: 131}
				case 2 - 1:

				case 3 - 1:
					err = enc.ErrSkipRequired{Name: "MaxValidPeriod", TypeNum: 139}
				case 4 - 1:
					value.CaCertificate = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 5; progress++ {
		switch progress {
		case 0 - 1:
			value.CaPrefix = nil
		case 1 - 1:
			err = enc.ErrSkipRequired{Name: "CaInfo", TypeNum: 131}
		case 2 - 1:

		case 3 - 1:
			err = enc.ErrSkipRequired{Name: "MaxValidPeriod", TypeNum: 139}
		case 4 - 1:
			value.CaCertificate = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *CaProfile) Encode() enc.Wire {
	encoder := CaProfileEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *CaProfile) Bytes() []byte {
	return value.Encode().Join()
}

func ParseCaProfile(reader enc.ParseReader, ignoreCritical bool) (*CaProfile, error) {
	context := CaProfileParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type NewInterestAppParametersEncoder struct {
	length uint
}

type NewInterestAppParametersParsingContext struct {
}

func (encoder *NewInterestAppParametersEncoder) Init(value *NewInterestAppParameters) {

	l := uint(0)
	if value.EcdhPub != nil {
		l += 1
		switch x := len(value.EcdhPub); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.EcdhPub))
	}

	if value.CertRequest != nil {
		l += 1
		switch x := len(value.CertRequest); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.CertRequest))
	}

	encoder.length = l

}

func (context *NewInterestAppParametersParsingContext) Init() {

}

func (encoder *NewInterestAppParametersEncoder) EncodeInto(value *NewInterestAppParameters, buf []byte) {

	pos := uint(0)
	if value.EcdhPub != nil {
		buf[pos] = byte(145)
		pos += 1
		switch x := len(value.EcdhPub); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.EcdhPub)
		pos += uint(len(value.EcdhPub))
	}

	if value.CertRequest != nil {
		buf[pos] = byte(147)
		pos += 1
		switch x := len(value.CertRequest); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.CertRequest)
		pos += uint(len(value.CertRequest))
	}

}

func (encoder *NewInterestAppParametersEncoder) Encode(value *NewInterestAppParameters) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *NewInterestAppParametersParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*NewInterestAppParameters, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &NewInterestAppParameters{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 145:
				if progress+1 == 0 {
					handled = true
					value.EcdhPub = make([]byte, l)
					_, err = io.ReadFull(reader, value.EcdhPub)

				}
			case 147:
				if progress+1 == 1 {
					handled = true
					value.CertRequest = make([]byte, l)
					_, err = io.ReadFull(reader, value.CertRequest)

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.EcdhPub = nil
				case 1 - 1:
					value.CertRequest = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:
			value.EcdhPub = nil
		case 1 - 1:
			value.CertRequest = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *NewInterestAppParameters) Encode() enc.Wire {
	encoder := NewInterestAppParametersEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *NewInterestAppParameters) Bytes() []byte {
	return value.Encode().Join()
}

func ParseNewInterestAppParameters(reader enc.ParseReader, ignoreCritical bool) (*NewInterestAppParameters, error) {
	context := NewInterestAppParametersParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type NewDataEncoder struct {
	length uint

	Challenge_subencoder []struct {
	}
}

type NewDataParsingContext struct {
}

func (encoder *NewDataEncoder) Init(value *NewData) {

	{
		Challenge_l := len(value.Challenge)
		encoder.Challenge_subencoder = make([]struct {
		}, Challenge_l)
		for i := 0; i < Challenge_l; i++ {
			pseudoEncoder := &encoder.Challenge_subencoder[i]
			pseudoValue := struct {
				Challenge string
			}{
				Challenge: value.Challenge[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue

				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.EcdhPub != nil {
		l += 1
		switch x := len(value.EcdhPub); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.EcdhPub))
	}

	if value.Salt != nil {
		l += 1
		switch x := len(value.Salt); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.Salt))
	}

	if value.RequestId != nil {
		l += 1
		switch x := len(value.RequestId); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.RequestId))
	}

	if value.Challenge != nil {
		for seq_i, seq_v := range value.Challenge {
			pseudoEncoder := &encoder.Challenge_subencoder[seq_i]
			pseudoValue := struct {
				Challenge string
			}{
				Challenge: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				l += 1
				switch x := len(value.Challenge); {
				case x <= 0xfc:
					l += 1
				case x <= 0xffff:
					l += 3
				case x <= 0xffffffff:
					l += 5
				default:
					l += 9
				}
				l += uint(len(value.Challenge))

				_ = encoder
				_ = value
			}
		}
	}

	encoder.length = l

}

func (context *NewDataParsingContext) Init() {

}

func (encoder *NewDataEncoder) EncodeInto(value *NewData, buf []byte) {

	pos := uint(0)
	if value.EcdhPub != nil {
		buf[pos] = byte(145)
		pos += 1
		switch x := len(value.EcdhPub); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.EcdhPub)
		pos += uint(len(value.EcdhPub))
	}

	if value.Salt != nil {
		buf[pos] = byte(149)
		pos += 1
		switch x := len(value.Salt); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.Salt)
		pos += uint(len(value.Salt))
	}

	if value.RequestId != nil {
		buf[pos] = byte(151)
		pos += 1
		switch x := len(value.RequestId); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.RequestId)
		pos += uint(len(value.RequestId))
	}

	if value.Challenge != nil {
		for seq_i, seq_v := range value.Challenge {
			pseudoEncoder := &encoder.Challenge_subencoder[seq_i]
			pseudoValue := struct {
				Challenge string
			}{
				Challenge: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				buf[pos] = byte(153)
				pos += 1
				switch x := len(value.Challenge); {
				case x <= 0xfc:
					buf[pos] = byte(x)
					pos += 1
				case x <= 0xffff:
					buf[pos] = 0xfd
					binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
					pos += 3
				case x <= 0xffffffff:
					buf[pos] = 0xfe
					binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
					pos += 5
				default:
					buf[pos] = 0xff
					binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
					pos += 9
				}
				copy(buf[pos:], value.Challenge)
				pos += uint(len(value.Challenge))

				_ = encoder
				_ = value
			}
		}
	}

}

func (encoder *NewDataEncoder) Encode(value *NewData) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *NewDataParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*NewData, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &NewData{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 145:
				if progress+1 == 0 {
					handled = true
					value.EcdhPub = make([]byte, l)
					_, err = io.ReadFull(reader, value.EcdhPub)

				}
			case 149:
				if progress+1 == 1 {
					handled = true
					value.Salt = make([]byte, l)
					_, err = io.ReadFull(reader, value.Salt)

				}
			case 151:
				if progress+1 == 2 {
					handled = true
					value.RequestId = make([]byte, l)
					_, err = io.ReadFull(reader, value.RequestId)

				}
			case 153:
				if progress+1 == 3 {
					handled = true
					if value.Challenge == nil {
						value.Challenge = make([]string, 0)
					}
					{
						pseudoValue := struct {
							Challenge string
						}{}
						{
							value := &pseudoValue
							{
								var builder strings.Builder
								_, err = io.CopyN(&builder, reader, int64(l))
								if err == nil {
									value.Challenge = builder.String()
								}
							}

							_ = value
						}
						value.Challenge = append(value.Challenge, pseudoValue.Challenge)
					}
					progress--

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.EcdhPub = nil
				case 1 - 1:
					value.Salt = nil
				case 2 - 1:
					value.RequestId = nil
				case 3 - 1:

				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 4; progress++ {
		switch progress {
		case 0 - 1:
			value.EcdhPub = nil
		case 1 - 1:
			value.Salt = nil
		case 2 - 1:
			value.RequestId = nil
		case 3 - 1:

		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *NewData) Encode() enc.Wire {
	encoder := NewDataEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *NewData) Bytes() []byte {
	return value.Encode().Join()
}

func ParseNewData(reader enc.ParseReader, ignoreCritical bool) (*NewData, error) {
	context := NewDataParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type EncryptedMessageEncoder struct {
	length uint
}

type EncryptedMessageParsingContext struct {
}

func (encoder *EncryptedMessageEncoder) Init(value *EncryptedMessage) {

	l := uint(0)
	if value.InitializationVector != nil {
		l += 1
		switch x := len(value.InitializationVector); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.InitializationVector))
	}

	if value.AuthenticationTag != nil {
		l += 1
		switch x := len(value.AuthenticationTag); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.AuthenticationTag))
	}

	if value.EncryptedPayload != nil {
		l += 1
		switch x := len(value.EncryptedPayload); {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += uint(len(value.EncryptedPayload))
	}

	encoder.length = l

}

func (context *EncryptedMessageParsingContext) Init() {

}

func (encoder *EncryptedMessageEncoder) EncodeInto(value *EncryptedMessage, buf []byte) {

	pos := uint(0)
	if value.InitializationVector != nil {
		buf[pos] = byte(157)
		pos += 1
		switch x := len(value.InitializationVector); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.InitializationVector)
		pos += uint(len(value.InitializationVector))
	}

	if value.AuthenticationTag != nil {
		buf[pos] = byte(175)
		pos += 1
		switch x := len(value.AuthenticationTag); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.AuthenticationTag)
		pos += uint(len(value.AuthenticationTag))
	}

	if value.EncryptedPayload != nil {
		buf[pos] = byte(159)
		pos += 1
		switch x := len(value.EncryptedPayload); {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		copy(buf[pos:], value.EncryptedPayload)
		pos += uint(len(value.EncryptedPayload))
	}

}

func (encoder *EncryptedMessageEncoder) Encode(value *EncryptedMessage) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *EncryptedMessageParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*EncryptedMessage, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &EncryptedMessage{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 157:
				if progress+1 == 0 {
					handled = true
					value.InitializationVector = make([]byte, l)
					_, err = io.ReadFull(reader, value.InitializationVector)

				}
			case 175:
				if progress+1 == 1 {
					handled = true
					value.AuthenticationTag = make([]byte, l)
					_, err = io.ReadFull(reader, value.AuthenticationTag)

				}
			case 159:
				if progress+1 == 2 {
					handled = true
					value.EncryptedPayload = make([]byte, l)
					_, err = io.ReadFull(reader, value.EncryptedPayload)

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.InitializationVector = nil
				case 1 - 1:
					value.AuthenticationTag = nil
				case 2 - 1:
					value.EncryptedPayload = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 3; progress++ {
		switch progress {
		case 0 - 1:
			value.InitializationVector = nil
		case 1 - 1:
			value.AuthenticationTag = nil
		case 2 - 1:
			value.EncryptedPayload = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *EncryptedMessage) Encode() enc.Wire {
	encoder := EncryptedMessageEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *EncryptedMessage) Bytes() []byte {
	return value.Encode().Join()
}

func ParseEncryptedMessage(reader enc.ParseReader, ignoreCritical bool) (*EncryptedMessage, error) {
	context := EncryptedMessageParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type ChallengeInterestPlaintextEncoder struct {
	length uint

	Parameters_valencoder map[string]*struct {
	}
}

type ChallengeInterestPlaintextParsingContext struct {
}

func (encoder *ChallengeInterestPlaintextEncoder) Init(value *ChallengeInterestPlaintext) {

	{
		Parameters_l := len(value.Parameters)
		encoder.Parameters_valencoder = make(map[string]*struct {
		}, Parameters_l)
		for map_k := range value.Parameters {
			pseudoEncoder := &struct {
			}{}
			encoder.Parameters_valencoder[map_k] = pseudoEncoder
			pseudoValue := struct {
				Parameters_v []byte
			}{
				Parameters_v: value.Parameters[map_k],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue

				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	l += 1
	switch x := len(value.SelectedChallenge); {
	case x <= 0xfc:
		l += 1
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}
	l += uint(len(value.SelectedChallenge))

	if value.Parameters != nil {
		for map_k, map_v := range value.Parameters {
			pseudoEncoder := encoder.Parameters_valencoder[map_k]
			pseudoValue := struct {
				Parameters_k string
				Parameters_v []byte
			}{
				Parameters_k: map_k,
				Parameters_v: map_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				l += 1
				switch x := len(value.Parameters_k); {
				case x <= 0xfc:
					l += 1
				case x <= 0xffff:
					l += 3
				case x <= 0xffffffff:
					l += 5
				default:
					l += 9
				}
				l += uint(len(value.Parameters_k))

				if value.Parameters_v != nil {
					l += 1
					switch x := len(value.Parameters_v); {
					case x <= 0xfc:
						l += 1
					case x <= 0xffff:
						l += 3
					case x <= 0xffffffff:
						l += 5
					default:
						l += 9
					}
					l += uint(len(value.Parameters_v))
				}

				_ = encoder
				_ = value
			}
		}
	}

	encoder.length = l

}

func (context *ChallengeInterestPlaintextParsingContext) Init() {

}

func (encoder *ChallengeInterestPlaintextEncoder) EncodeInto(value *ChallengeInterestPlaintext, buf []byte) {

	pos := uint(0)
	buf[pos] = byte(161)
	pos += 1
	switch x := len(value.SelectedChallenge); {
	case x <= 0xfc:
		buf[pos] = byte(x)
		pos += 1
	case x <= 0xffff:
		buf[pos] = 0xfd
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 0xfe
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 0xff
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}
	copy(buf[pos:], value.SelectedChallenge)
	pos += uint(len(value.SelectedChallenge))

	if value.Parameters != nil {
		for map_k, map_v := range value.Parameters {
			pseudoEncoder := encoder.Parameters_valencoder[map_k]
			pseudoValue := struct {
				Parameters_k string
				Parameters_v []byte
			}{
				Parameters_k: map_k,
				Parameters_v: map_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				buf[pos] = byte(133)
				pos += 1
				switch x := len(value.Parameters_k); {
				case x <= 0xfc:
					buf[pos] = byte(x)
					pos += 1
				case x <= 0xffff:
					buf[pos] = 0xfd
					binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
					pos += 3
				case x <= 0xffffffff:
					buf[pos] = 0xfe
					binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
					pos += 5
				default:
					buf[pos] = 0xff
					binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
					pos += 9
				}
				copy(buf[pos:], value.Parameters_k)
				pos += uint(len(value.Parameters_k))

				if value.Parameters_v != nil {
					buf[pos] = byte(135)
					pos += 1
					switch x := len(value.Parameters_v); {
					case x <= 0xfc:
						buf[pos] = byte(x)
						pos += 1
					case x <= 0xffff:
						buf[pos] = 0xfd
						binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
						pos += 3
					case x <= 0xffffffff:
						buf[pos] = 0xfe
						binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
						pos += 5
					default:
						buf[pos] = 0xff
						binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
						pos += 9
					}
					copy(buf[pos:], value.Parameters_v)
					pos += uint(len(value.Parameters_v))
				}

				_ = encoder
				_ = value
			}
		}
	}

}

func (encoder *ChallengeInterestPlaintextEncoder) Encode(value *ChallengeInterestPlaintext) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ChallengeInterestPlaintextParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*ChallengeInterestPlaintext, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &ChallengeInterestPlaintext{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 161:
				if progress+1 == 0 {
					handled = true
					{
						var builder strings.Builder
						_, err = io.CopyN(&builder, reader, int64(l))
						if err == nil {
							value.SelectedChallenge = builder.String()
						}
					}

				}
			case 133:
				if progress+1 == 1 {
					handled = true
					if value.Parameters == nil {
						value.Parameters = make(map[string][]byte)
					}
					{
						pseudoValue := struct {
							Parameters_k string
							Parameters_v []byte
						}{}
						{
							value := &pseudoValue
							{
								var builder strings.Builder
								_, err = io.CopyN(&builder, reader, int64(l))
								if err == nil {
									value.Parameters_k = builder.String()
								}
							}

							typ := enc.TLNum(0)
							l := enc.TLNum(0)
							typ, err = enc.ReadTLNum(reader)
							if err != nil {
								return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
							}
							l, err = enc.ReadTLNum(reader)
							if err != nil {
								return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
							}
							if typ != 135 {
								return nil, enc.ErrFailToParse{TypeNum: 133, Err: enc.ErrUnrecognizedField{TypeNum: typ}}
							}
							value.Parameters_v = make([]byte, l)
							_, err = io.ReadFull(reader, value.Parameters_v)

							_ = value
						}
						value.Parameters[pseudoValue.Parameters_k] = pseudoValue.Parameters_v
					}
					progress--

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					err = enc.ErrSkipRequired{Name: "SelectedChallenge", TypeNum: 161}
				case 1 - 1:

				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:
			err = enc.ErrSkipRequired{Name: "SelectedChallenge", TypeNum: 161}
		case 1 - 1:

		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *ChallengeInterestPlaintext) Encode() enc.Wire {
	encoder := ChallengeInterestPlaintextEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ChallengeInterestPlaintext) Bytes() []byte {
	return value.Encode().Join()
}

func ParseChallengeInterestPlaintext(reader enc.ParseReader, ignoreCritical bool) (*ChallengeInterestPlaintext, error) {
	context := ChallengeInterestPlaintextParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type ChallengeDataPlaintextEncoder struct {
	length uint

	IssuedCertificateName_length uint
	ForwardingHint_length        uint

	Parameters_valencoder map[string]*struct {
	}
}

type ChallengeDataPlaintextParsingContext struct {
}

func (encoder *ChallengeDataPlaintextEncoder) Init(value *ChallengeDataPlaintext) {

	if value.IssuedCertificateName != nil {
		encoder.IssuedCertificateName_length = 0
		for _, c := range value.IssuedCertificateName {
			encoder.IssuedCertificateName_length += uint(c.EncodingLength())
		}
	}

	if value.ForwardingHint != nil {
		encoder.ForwardingHint_length = 0
		for _, c := range value.ForwardingHint {
			encoder.ForwardingHint_length += uint(c.EncodingLength())
		}
	}

	{
		Parameters_l := len(value.Parameters)
		encoder.Parameters_valencoder = make(map[string]*struct {
		}, Parameters_l)
		for map_k := range value.Parameters {
			pseudoEncoder := &struct {
			}{}
			encoder.Parameters_valencoder[map_k] = pseudoEncoder
			pseudoValue := struct {
				Parameters_v []byte
			}{
				Parameters_v: value.Parameters[map_k],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue

				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	l += 1
	switch x := value.Status; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	l += 1
	switch x := len(value.ChallengeStatus); {
	case x <= 0xfc:
		l += 1
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}
	l += uint(len(value.ChallengeStatus))

	if value.IssuedCertificateName != nil {
		l += 1
		switch x := encoder.IssuedCertificateName_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.IssuedCertificateName_length
	}

	if value.ForwardingHint != nil {
		l += 1
		switch x := encoder.ForwardingHint_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.ForwardingHint_length
	}

	if value.RemainingTries != nil {
		l += 1
		switch x := *value.RemainingTries; {
		case x <= 0xff:
			l += 2
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
	}

	if value.RemainingTime != nil {
		l += 1
		switch x := *value.RemainingTime; {
		case x <= 0xff:
			l += 2
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
	}

	if value.Parameters != nil {
		for map_k, map_v := range value.Parameters {
			pseudoEncoder := encoder.Parameters_valencoder[map_k]
			pseudoValue := struct {
				Parameters_k string
				Parameters_v []byte
			}{
				Parameters_k: map_k,
				Parameters_v: map_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				l += 1
				switch x := len(value.Parameters_k); {
				case x <= 0xfc:
					l += 1
				case x <= 0xffff:
					l += 3
				case x <= 0xffffffff:
					l += 5
				default:
					l += 9
				}
				l += uint(len(value.Parameters_k))

				if value.Parameters_v != nil {
					l += 1
					switch x := len(value.Parameters_v); {
					case x <= 0xfc:
						l += 1
					case x <= 0xffff:
						l += 3
					case x <= 0xffffffff:
						l += 5
					default:
						l += 9
					}
					l += uint(len(value.Parameters_v))
				}

				_ = encoder
				_ = value
			}
		}
	}

	encoder.length = l

}

func (context *ChallengeDataPlaintextParsingContext) Init() {

}

func (encoder *ChallengeDataPlaintextEncoder) EncodeInto(value *ChallengeDataPlaintext, buf []byte) {

	pos := uint(0)
	buf[pos] = byte(155)
	pos += 1
	switch x := value.Status; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

	buf[pos] = byte(163)
	pos += 1
	switch x := len(value.ChallengeStatus); {
	case x <= 0xfc:
		buf[pos] = byte(x)
		pos += 1
	case x <= 0xffff:
		buf[pos] = 0xfd
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 0xfe
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 0xff
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}
	copy(buf[pos:], value.ChallengeStatus)
	pos += uint(len(value.ChallengeStatus))

	if value.IssuedCertificateName != nil {
		buf[pos] = byte(169)
		pos += 1
		switch x := encoder.IssuedCertificateName_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.IssuedCertificateName {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

	if value.ForwardingHint != nil {
		buf[pos] = byte(30)
		pos += 1
		switch x := encoder.ForwardingHint_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.ForwardingHint {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

	if value.RemainingTries != nil {
		buf[pos] = byte(165)
		pos += 1
		switch x := *value.RemainingTries; {
		case x <= 0xff:
			buf[pos] = 1
			buf[pos+1] = byte(x)
			pos += 2
		case x <= 0xffff:
			buf[pos] = 2
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 4
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 8
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
	}

	if value.RemainingTime != nil {
		buf[pos] = byte(167)
		pos += 1
		switch x := *value.RemainingTime; {
		case x <= 0xff:
			buf[pos] = 1
			buf[pos+1] = byte(x)
			pos += 2
		case x <= 0xffff:
			buf[pos] = 2
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 4
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 8
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
	}

	if value.Parameters != nil {
		for map_k, map_v := range value.Parameters {
			pseudoEncoder := encoder.Parameters_valencoder[map_k]
			pseudoValue := struct {
				Parameters_k string
				Parameters_v []byte
			}{
				Parameters_k: map_k,
				Parameters_v: map_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				buf[pos] = byte(133)
				pos += 1
				switch x := len(value.Parameters_k); {
				case x <= 0xfc:
					buf[pos] = byte(x)
					pos += 1
				case x <= 0xffff:
					buf[pos] = 0xfd
					binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
					pos += 3
				case x <= 0xffffffff:
					buf[pos] = 0xfe
					binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
					pos += 5
				default:
					buf[pos] = 0xff
					binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
					pos += 9
				}
				copy(buf[pos:], value.Parameters_k)
				pos += uint(len(value.Parameters_k))

				if value.Parameters_v != nil {
					buf[pos] = byte(135)
					pos += 1
					switch x := len(value.Parameters_v); {
					case x <= 0xfc:
						buf[pos] = byte(x)
						pos += 1
					case x <= 0xffff:
						buf[pos] = 0xfd
						binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
						pos += 3
					case x <= 0xffffffff:
						buf[pos] = 0xfe
						binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
						pos += 5
					default:
						buf[pos] = 0xff
						binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
						pos += 9
					}
					copy(buf[pos:], value.Parameters_v)
					pos += uint(len(value.Parameters_v))
				}

				_ = encoder
				_ = value
			}
		}
	}

}

func (encoder *ChallengeDataPlaintextEncoder) Encode(value *ChallengeDataPlaintext) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ChallengeDataPlaintextParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*ChallengeDataPlaintext, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &ChallengeDataPlaintext{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 155:
				if progress+1 == 0 {
					handled = true
					value.Status = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Status = uint64(value.Status<<8) | uint64(x)
						}
					}
				}
			case 163:
				if progress+1 == 1 {
					handled = true
					{
						var builder strings.Builder
						_, err = io.CopyN(&builder, reader, int64(l))
						if err == nil {
							value.ChallengeStatus = builder.String()
						}
					}

				}
			case 169:
				if progress+1 == 2 {
					handled = true
					value.IssuedCertificateName = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.IssuedCertificateName {
						if reader.Pos() >= endName {
							value.IssuedCertificateName = value.IssuedCertificateName[:j]
							break
						}
						var err1, err3 error
						value.IssuedCertificateName[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.IssuedCertificateName[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			case 30:
				if progress+1 == 3 {
					handled = true
					value.ForwardingHint = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.ForwardingHint {
						if reader.Pos() >= endName {
							value.ForwardingHint = value.ForwardingHint[:j]
							break
						}
						var err1, err3 error
						value.ForwardingHint[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.ForwardingHint[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			case 165:
				if progress+1 == 4 {
					handled = true
					{
						tempVal := uint64(0)
						tempVal = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								tempVal = uint64(tempVal<<8) | uint64(x)
							}
						}
						value.RemainingTries = &tempVal
					}

				}
			case 167:
				if progress+1 == 5 {
					handled = true
					{
						tempVal := uint64(0)
						tempVal = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								tempVal = uint64(tempVal<<8) | uint64(x)
							}
						}
						value.RemainingTime = &tempVal
					}

				}
			case 133:
				if progress+1 == 6 {
					handled = true
					if value.Parameters == nil {
						value.Parameters = make(map[string][]byte)
					}
					{
						pseudoValue := struct {
							Parameters_k string
							Parameters_v []byte
						}{}
						{
							value := &pseudoValue
							{
								var builder strings.Builder
								_, err = io.CopyN(&builder, reader, int64(l))
								if err == nil {
									value.Parameters_k = builder.String()
								}
							}

							typ := enc.TLNum(0)
							l := enc.TLNum(0)
							typ, err = enc.ReadTLNum(reader)
							if err != nil {
								return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
							}
							l, err = enc.ReadTLNum(reader)
							if err != nil {
								return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
							}
							if typ != 135 {
								return nil, enc.ErrFailToParse{TypeNum: 133, Err: enc.ErrUnrecognizedField{TypeNum: typ}}
							}
							value.Parameters_v = make([]byte, l)
							_, err = io.ReadFull(reader, value.Parameters_v)

							_ = value
						}
						value.Parameters[pseudoValue.Parameters_k] = pseudoValue.Parameters_v
					}
					progress--

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					err = enc.ErrSkipRequired{Name: "Status", TypeNum: 155}
				case 1 - 1:
					err = enc.ErrSkipRequired{Name: "ChallengeStatus", TypeNum: 163}
				case 2 - 1:
					value.IssuedCertificateName = nil
				case 3 - 1:
					value.ForwardingHint = nil
				case 4 - 1:
					value.RemainingTries = nil
				case 5 - 1:
					value.RemainingTime = nil
				case 6 - 1:

				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 7; progress++ {
		switch progress {
		case 0 - 1:
			err = enc.ErrSkipRequired{Name: "Status", TypeNum: 155}
		case 1 - 1:
			err = enc.ErrSkipRequired{Name: "ChallengeStatus", TypeNum: 163}
		case 2 - 1:
			value.IssuedCertificateName = nil
		case 3 - 1:
			value.ForwardingHint = nil
		case 4 - 1:
			value.RemainingTries = nil
		case 5 - 1:
			value.RemainingTime = nil
		case 6 - 1:

		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *ChallengeDataPlaintext) Encode() enc.Wire {
	encoder := ChallengeDataPlaintextEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ChallengeDataPlaintext) Bytes() []byte {
	return value.Encode().Join()
}

func ParseChallengeDataPlaintext(reader enc.ParseReader, ignoreCritical bool) (*ChallengeDataPlaintext, error) {
	context := ChallengeDataPlaintextParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type ErrorMessageEncoder struct {
	length uint
}

type ErrorMessageParsingContext struct {
}

func (encoder *ErrorMessageEncoder) Init(value *ErrorMessage) {

	l := uint(0)
	l += 1
	switch x := value.ErrorCode; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	l += 1
	switch x := len(value.ErrorInfo); {
	case x <= 0xfc:
		l += 1
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}
	l += uint(len(value.ErrorInfo))

	encoder.length = l

}

func (context *ErrorMessageParsingContext) Init() {

}

func (encoder *ErrorMessageEncoder) EncodeInto(value *ErrorMessage, buf []byte) {

	pos := uint(0)
	buf[pos] = byte(171)
	pos += 1
	switch x := value.ErrorCode; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

	buf[pos] = byte(173)
	pos += 1
	switch x := len(value.ErrorInfo); {
	case x <= 0xfc:
		buf[pos] = byte(x)
		pos += 1
	case x <= 0xffff:
		buf[pos] = 0xfd
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 0xfe
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 0xff
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}
	copy(buf[pos:], value.ErrorInfo)
	pos += uint(len(value.ErrorInfo))

}

func (encoder *ErrorMessageEncoder) Encode(value *ErrorMessage) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ErrorMessageParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*ErrorMessage, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &ErrorMessage{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 171:
				if progress+1 == 0 {
					handled = true
					value.ErrorCode = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.ErrorCode = uint64(value.ErrorCode<<8) | uint64(x)
						}
					}
				}
			case 173:
				if progress+1 == 1 {
					handled = true
					{
						var builder strings.Builder
						_, err = io.CopyN(&builder, reader, int64(l))
						if err == nil {
							value.ErrorInfo = builder.String()
						}
					}

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					err = enc.ErrSkipRequired{Name: "ErrorCode", TypeNum: 171}
				case 1 - 1:
					err = enc.ErrSkipRequired{Name: "ErrorInfo", TypeNum: 173}
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:
			err = enc.ErrSkipRequired{Name: "ErrorCode", TypeNum: 171}
		case 1 - 1:
			err = enc.ErrSkipRequired{Name: "ErrorInfo", TypeNum: 173}
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *ErrorMessage) Encode() enc.Wire {
	encoder := ErrorMessageEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ErrorMessage) Bytes() []byte {
	return value.Encode().Join()
}

func ParseErrorMessage(reader enc.ParseReader, ignoreCritical bool) (*ErrorMessage, error) {
	context := ErrorMessageParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}
